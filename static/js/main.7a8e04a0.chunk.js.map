{"version":3,"sources":["Wizard.js","LineChartWidget.js","SumMinMaxWidget.js","DashboardWidget.js","App.js","reportWebVitals.js","client.js","index.js"],"names":["Wizard","_onSubmit","onSubmit","props","useForm","defaultValues","w","h","x","y","static","title","Date","now","widget_type","query","series","label","datasource","primary","secondary","control","register","handleSubmit","watch","useFieldArray","name","fields","append","watchAllFields","Modal","aria-labelledby","aria-describedby","style","background","width","position","top","left","data","htmlFor","id","defaultValue","ref","type","value","rows","cols","Button","onClick","map","field","index","margin","radius","JSON","stringify","LineChartWidget","React","useMemo","showPoints","axes","_data","get","dataSourceRecord","tooltip","SumMinMaxWidget","sum","min","max","dataPtr","textAlign","display","flexGrow","flexBasis","flex","textTransform","DashboardWidget","useQuery","gql","loading","error","console","log","ResponsiveReactGridLayout","WidthProvider","Responsive","DEFAULT_LAYOUT","generateLayout","App","key","initialValue","useState","item","window","localStorage","getItem","parse","storedValue","setStoredValue","valueToStore","Function","setItem","removeItem","useLocalStorage","layout","setLayout","clearLayout","wizardOpen","setWizardOpen","length","widgetCount","setWidgetCount","open","onClose","newWidget","i","layouts","lg","onLayoutChange","nlayout","nl","oldValues","find","l","measureBeforeMount","className","marginRight","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","require","resolvers","Query","player_logins","root","args","overallData","min_date","minDate","filter","timestamp","max_date","maxDate","overlay","other","origTimestamp","overlayTimestamp","setDate","getDate","toString","player_logins_agg","PlayerLoginsAgg","reduce","pV","count","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","schema","makeExecutableSchema","typeDefs","graphqlClient","ApolloClient","cache","InMemoryCache","link","SchemaLink","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"kk/BAkKeA,MA7Jf,YAAkD,IAAvBC,EAAsB,EAAhCC,SAAwBC,EAAQ,8BAEIC,YAAQ,CACzDC,cAAe,CACbC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,QAAQ,EACRC,MAAM,UAAD,OAAYC,KAAKC,OACtBC,YAAa,OACbC,MAAM,qFAONC,OAAQ,CACN,CACEC,MAAO,SACPC,WAAY,gBACZC,QAAS,YACTC,UAAW,aArBXC,EAFuC,EAEvCA,QAASC,EAF8B,EAE9BA,SAAUC,EAFoB,EAEpBA,aAAcC,EAFM,EAENA,MAFM,EA8BpBC,YAAc,CACvCJ,UACAK,KAAM,WAFAC,EA9BuC,EA8BvCA,OAAQC,EA9B+B,EA8B/BA,OAKVC,EAAiBL,IAKvB,OACE,cAACM,EAAA,EAAD,2BACM3B,GADN,IAEE4B,kBAAgB,qBAChBC,mBAAiB,2BAHnB,SAKE,qBACEC,MAAO,CACLC,WAAY,QACZC,MAAO,MACPC,SAAU,WACVC,IAAK,OACLC,KAAM,OANV,SASE,uBAAMpC,SAAUqB,GAnBL,SAACgB,GAChBtC,EAAUsC,MAkBN,UACE,gCACE,uBAAOC,QAAQ,QAAf,mBACA,uBAAOC,GAAG,QAAQf,KAAK,QAAQgB,aAAa,OAAOC,IAAKrB,OAG1D,0CACS,uBAAOsB,KAAK,SAASH,GAAG,IAAIf,KAAK,IAAIiB,IAAKrB,IAAY,uBAD/D,WAEU,uBAAOsB,KAAK,SAASH,GAAG,IAAIf,KAAK,IAAIiB,IAAKrB,IAAY,uBAFhE,MAGK,uBAAOsB,KAAK,SAASH,GAAG,IAAIf,KAAK,IAAIiB,IAAKrB,IAAY,uBAH3D,MAIK,uBAAOsB,KAAK,SAASH,GAAG,IAAIf,KAAK,IAAIiB,IAAKrB,IAAY,0BAG3D,uBAEA,gCACE,uBAAOkB,QAAQ,cAAf,yBACA,yBAAQd,KAAK,cAAciB,IAAKrB,EAAhC,UACE,wBAAQuB,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,cAAd,+BAIJ,uBACA,uBAEA,gCACE,8BACE,uBAAOL,QAAQ,QAAf,6BAEF,0BAAUd,KAAK,QAAQiB,IAAKrB,EAAUwB,KAAM,GAAIC,KAAM,QAGxD,8BACE,cAACC,EAAA,EAAD,CAAQC,QAASrB,EAAjB,0BAGDD,EAAOuB,KAAI,SAACC,EAAOC,GAAR,OACV,sBAAoBnB,MAAO,CAAEoB,OAAQ,QAArC,UACE,wCAEE,uBACEpB,MAAO,CAAEE,MAAO,QAChBT,KAAI,iBAAY0B,EAAZ,WACJT,IAAKrB,IACLoB,aAAcS,EAAMlC,WAGxB,6CAEE,uBACEgB,MAAO,CAAEE,MAAO,QAChBT,KAAI,iBAAY0B,EAAZ,gBACJT,IAAKrB,IACLoB,aAAcS,EAAMjC,gBAGxB,0CAEE,uBACEQ,KAAI,iBAAY0B,EAAZ,aACJT,IAAKrB,IACLoB,aAAcS,EAAMhC,aAIxB,4CAEE,uBACEO,KAAI,iBAAY0B,EAAZ,eACJT,IAAKrB,IACLoB,aAAcS,EAAM/B,eAIQ,WAA/BS,EAAef,aACd,yCAEE,uBACEY,KAAI,iBAAY0B,EAAZ,YACJT,IAAKrB,IACLoB,aAAcS,EAAMG,cA3ClBH,EAAMV,OAkDlB,8BACE,uBAAOG,KAAK,aAGb,8BAAMW,KAAKC,UAAU3B,EAAgB,KAAM,c,0BC5GvC4B,MA3Cf,SAAyBtD,GACvB,IAAMa,EAAS0C,IAAMC,SACnB,iBAAO,CACLC,YAAY,KAEd,IAGIC,EAAOH,IAAMC,SACjB,iBAAM,CACJ,CACExC,SAAS,EACTyB,KAAM,OACNR,SAAU,UAEZ,CAAEQ,KAAM,SAAUR,SAAU,WAE9B,IAGI0B,EAAQJ,IAAMC,SAClB,kBACExD,EAAMa,OAAOkC,KAAI,SAAClC,GAChB,IAAME,EAAa6C,cAAI5D,EAAMoC,KAAMvB,EAAOE,YAE1C,MAAO,CACLD,MAAOD,EAAOC,MACdsB,MAAgB,OAAVrB,QAAU,IAAVA,OAAA,EAAAA,EAAYgC,KAAI,SAACc,GAGrB,MAAO,CACL7C,QAAS,IAAIP,KAAKmD,cAAIC,EAAkBhD,EAAOG,UAC/CC,UAAW2C,cAAIC,EAAkBhD,EAAOI,iBAEtC,SAGZ,CAACjB,EAAMa,OAAQb,EAAMoC,OAGvB,OAAO,cAAC,QAAD,CAAOA,KAAMuB,EAAO9C,OAAQA,EAAQ6C,KAAMA,EAAMI,SAAO,KCRjDC,MAjCf,YAA0C,IAAhBlD,EAAe,EAAfA,OAAQuB,EAAO,EAAPA,KAChC,OACE,8BACGvB,EAAOkC,KAAI,YAAyC,IAAvCiB,EAAsC,EAAtCA,IAAKC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,IAAKpD,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAE5BoD,EAAUP,cAAIxB,EAAMrB,GAE1B,OAAKoD,EAIE,gCACH,oBAAIrC,MAAO,CAACsC,UAAW,UAAvB,SAAmCtD,IACnC,sBAAKgB,MAAO,CAACuC,QAAS,OAAQD,UAAW,SAAUE,SAAU,EAAGC,UAAW,EAAGvC,MAAO,QAArF,UACE,sBAAKF,MAAO,CAACoB,OAAQ,MAAOsB,KAAM,GAAlC,UACE,qBAAK1C,MAAO,CAAC2C,cAAe,aAA5B,qBACCb,cAAIO,EAASF,MAEhB,sBAAKnC,MAAO,CAACoB,OAAQ,MAAOsB,KAAM,GAAlC,UACE,qBAAK1C,MAAO,CAAC2C,cAAe,aAA5B,qBACCb,cAAIO,EAASD,MAEhB,sBAAKpC,MAAO,CAACoB,OAAQ,MAAOsB,KAAM,GAAlC,UACE,qBAAK1C,MAAO,CAAC2C,cAAe,aAA5B,uBACCb,cAAIO,EAASH,YAhBb,yCAAYZ,KAAKC,UAAUxC,Y,sFC0B7B6D,MAhCf,SAAyB1E,GAAQ,IAAD,EACG2E,mBAC/BC,cADwC,IAEpC5E,EAAMY,QAFJiE,EADsB,EACtBA,QAASC,EADa,EACbA,MAAO1C,EADM,EACNA,KAQxB,OAFA2C,QAAQC,IAAIH,EAASC,EAAO1C,GAExByC,EACK,KAGLC,GACFC,QAAQD,MAAMA,GACP,qEAC8B9E,EAAMY,UAKnB,SAAtBZ,EAAMW,YACD,cAAC,EAAD,aAAiByB,KAAMA,GAAUpC,IAGhB,gBAAtBA,EAAMW,YACD,cAAC,EAAD,aAAiByB,KAAMA,GAAUpC,IAGnC,mDCxBHiF,EAA4BC,wBAAcC,cAyChD,IAAMC,EAAiB,CACrB,CACE,MAAS,uBACT,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,YAAe,OACf,MAAS,qFACT,OAAU,CACR,CACE,MAAS,SACT,WAAc,gBACd,QAAW,YACX,UAAa,UAGjB,EAAK,IACL,OAAS,EACT,QAAU,GAEZ,CACE,MAAS,uBACT,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,YAAe,OACf,MAAS,oIACT,OAAU,CACR,CACE,MAAS,SACT,WAAc,gBACd,QAAW,YACX,UAAa,UAGjB,EAAK,IACL,OAAS,EACT,QAAU,GAEZ,CACE,MAAS,uBACT,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,YAAe,cACf,MAAQ,iGAWR,OAAU,CACR,CACE,MAAS,qBACT,WAAc,oBACd,IAAO,MACP,IAAO,MACP,IAAO,QAGX,EAAK,IACL,OAAS,EACT,QAAU,GAEZ,CACE,MAAS,uBACT,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,YAAe,OACf,MAAQ,gaAkBR,OAAU,CACR,CACE,MAAS,iBACT,WAAc,aACd,QAAW,YACX,UAAa,SAEf,CACE,MAAS,kBACT,WAAc,aACd,QAAW,YACX,UAAa,SAEf,CACE,MAAS,eACT,WAAc,aACd,QAAW,YACX,UAAa,UAGjB,EAAK,IACL,OAAS,EACT,QAAU,IAId,SAASC,IACP,OAAOD,EA+EME,MA5Ef,WAAgB,IAAD,EAtKf,SAAyBC,EAAKC,GAAc,MAGJC,oBAAS,WAC7C,IAEE,IAAMC,EAAOC,OAAOC,aAAaC,QAAQN,GAEzC,OAAOG,EAAOtC,KAAK0C,MAAMJ,GAAQF,EACjC,MAAOV,GAGP,OADAC,QAAQC,IAAIF,GACLU,MAZ+B,mBAGnCO,EAHmC,KAGtBC,EAHsB,KAoC1C,MAAO,CAACD,EAlBS,SAACrD,GAChB,IAEE,IAAMuD,EAAevD,aAAiBwD,SAAWxD,EAAMqD,GAAerD,EAEtEsD,EAAeC,GAEfN,OAAOC,aAAaO,QAAQZ,EAAKnC,KAAKC,UAAU4C,IAChD,MAAOnB,GAEPC,QAAQC,IAAIF,KAIG,WACjBa,OAAOC,aAAaQ,WAAWb,KAsIQc,CAAgB,SAAUhB,KADtD,mBACNiB,EADM,KACEC,EADF,KACaC,EADb,OAEuBjD,IAAMkC,UAAS,GAFtC,mBAENgB,EAFM,KAEMC,EAFN,OAGyBnD,IAAMkC,SAASa,EAAOK,QAH/C,mBAGNC,EAHM,KAGOC,EAHP,KAsCb,OACE,qCACE,cAAC,EAAD,CACEC,KAAML,EACNM,QAZN,WACEL,GAAc,IAYV3G,SAAU,SAACiH,GACTA,EAAU7G,GAAK6G,EAAU7G,EACzB6G,EAAU5G,GAAK4G,EAAU5G,EACzB4G,EAAU3G,GAAK2G,EAAU3G,EACzB2G,EAAU1G,GAAK0G,EAAU1G,EACzB0G,EAAUC,EAAV,UAAiBL,GACjBC,EAAeD,EAAc,GAE7B7B,QAAQC,IAAI,cAAegC,GAC3BT,EAAU,GAAD,mBAAKD,GAAL,CAAaU,KACtBN,GAAc,MAGlB,gCACE,sBAAK5E,MAAO,CAAEE,MAAO,QAArB,UACE,cAACa,EAAA,EAAD,CAAQC,QAxBhB,WACE4D,GAAc,IAuBR,wBACA,cAAC7D,EAAA,EAAD,CAAQC,QAnChB,WACE0D,IACAK,EAAezB,EAAeuB,QAC9BJ,EAAUlB,MAgCJ,0BACA,cAACJ,EAAD,CACEiC,QAAS,CAAEC,GAAIb,GACfc,eA/CV,SAAwBC,GACtBd,EACEc,EAAQtE,KAAI,SAACuE,GACX,IAAMC,EAAYjB,EAAOkB,MAAK,SAACC,GAAD,OAAOA,EAAER,IAAMK,EAAGL,KAChD,OAAO,2BAAKM,GAAcD,QA4CtBI,oBAAoB,EAHtB,SAtDC3E,cAAIuD,GAAQ,SAAUmB,EAAGR,GAC9B,OACE,qBAAaU,UAAWF,EAAElH,OAAS,SAAW,GAA9C,SACE,cAAC,EAAD,eAAqBkH,KADbR,WA4DV,qBAAKnF,MAAO,CAAE8F,YAAa,QAA3B,SACE,8BAAMxE,KAAKC,UAAUiD,EAAQ,KAAM,cC3O9BuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuB5B,UACxC,8BAAqB6B,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,kBCJR1F,EAAOiG,EAAQ,KAqBfC,EAAY,CAChBC,MAAO,CACLC,cAAe,SAACC,EAAMC,GACpB,IAAIC,EAAcvG,EAGlB,GAAIsG,EAAKE,SAAU,CACjB,IAAMC,EAAU,IAAIpI,KAAKiI,EAAKE,UAC9BD,EAAcA,EAAYG,QAAO,YAAkB,IAAhBC,EAAe,EAAfA,UACjC,OAAO,IAAItI,KAAKsI,IAAcF,KAIlC,GAAIH,EAAKM,SAAU,CACjB,IAAMC,EAAU,IAAIxI,KAAKiI,EAAKM,UAC9BL,EAAcA,EAAYG,QAAO,YAAkB,IAAhBC,EAAe,EAAfA,UACjC,OAAO,IAAItI,KAAKsI,IAAcE,KAiBlC,OAbIP,EAAKQ,UAEPP,EAAcA,EAAY5F,KAAI,YAA4B,IAA1BgG,EAAyB,EAAzBA,UAAcI,EAAW,6BACjDC,EAAgB,IAAI3I,KAAKsI,GAEzBM,EAAmB,IAAI5I,KAAK,cAGlC,OAFA4I,EAAiBC,QAAQF,EAAcG,WAEhC,2BAAIJ,GAAX,IAAkBJ,UAAWM,EAAiBG,iBAK3Cb,GAETc,kBAAmB,SAAChB,EAAMC,GACxB,MAAO,KAGXgB,gBAAiB,CACf1F,IAAK,WACH,OAAO5B,EAAKuH,QAAO,SAACC,EAAD,UAAiBA,EAAjB,EAAMC,QAAuB,IAElD3F,IAAK,WAGH,IAFA,IAAIA,EAAM4F,OAAOC,iBAER9C,EAAI,EAAIA,EAAI7E,EAAKuE,OAAQM,IAC5B7E,EAAK6E,GAAG4C,MAAQ3F,IAClBA,EAAM9B,EAAK6E,GAAG4C,OAIlB,OAAO3F,GAETD,IAAK,WAGH,IAFA,IAAIA,EAAM6F,OAAOE,iBAER/C,EAAI,EAAIA,EAAI7E,EAAKuE,OAAQM,IAC5B7E,EAAK6E,GAAG4C,MAAQ5F,IAClBA,EAAM7B,EAAK6E,GAAG4C,OAIlB,OAAO5F,KAMPgG,EAASC,YAAqB,CAClCC,SAxFY,+TAyFZ7B,cAKW8B,EAAgB,IAAIC,eAAa,CAC5CC,MAAO,IAAIC,gBACXC,KAAM,IAAIC,IAAW,CAAER,aAGzBtE,OAAOf,IAAMA,MACbe,OAAOyE,cAAgBA,EClGvBM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,iBAAD,CAAgBC,OAAQT,EAAxB,SACE,cAAC,EAAD,QAGJU,SAASC,eAAe,SAM1BlD,M","file":"static/js/main.7a8e04a0.chunk.js","sourcesContent":["import React from \"react\";\nimport { Modal, Button } from \"@material-ui/core\";\n\nimport { useForm, useFieldArray } from \"react-hook-form\";\n\nfunction Wizard({onSubmit: _onSubmit, ...props}) {\n  // errors\n  const { control, register, handleSubmit, watch } = useForm({\n    defaultValues: {\n      w: 5,\n      h: 3,\n      x: 0,\n      y: 0,\n      static: false,\n      title: `widget-${Date.now()}`,\n      widget_type: \"line\",\n      query: `query LineChartData {\n  player_logins {\n    timestamp\n    count\n  }\n}\n      `,\n      series: [\n        {\n          label: \"Logins\",\n          datasource: \"player_logins\",\n          primary: \"timestamp\",\n          secondary: \"count\",\n        },\n      ],\n    },\n  });\n\n//  prepend, remove, swap, move, insert\n  const { fields, append } = useFieldArray({\n    control, // control props comes from useForm (optional: if you are using FormContext)\n    name: \"series\", // unique name for your Field Array\n  });\n\n  const watchAllFields = watch(); // when pass nothing as argument, you are watching everything\n  const onSubmit = (data) => {\n    _onSubmit(data);\n  }\n\n  return (\n    <Modal\n      {...props}\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n    >\n      <div\n        style={{\n          background: \"white\",\n          width: \"50%\",\n          position: \"absolute\",\n          top: \"16px\",\n          left: \"25%\",\n        }}\n      >\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <div>\n            <label htmlFor=\"title\">Title</label>\n            <input id=\"title\" name=\"title\" defaultValue=\"test\" ref={register} />\n          </div>\n\n          <div>\n            Width: <input type=\"number\" id=\"w\" name=\"w\" ref={register} /><br/>\n            Height: <input type=\"number\" id=\"h\" name=\"h\" ref={register} /><br/>\n            x: <input type=\"number\" id=\"x\" name=\"x\" ref={register} /><br/>\n            y: <input type=\"number\" id=\"y\" name=\"y\" ref={register} /><br/>\n          </div>\n\n          <br />\n\n          <div>\n            <label htmlFor=\"widget_type\">Widget Type</label>\n            <select name=\"widget_type\" ref={register}>\n              <option value=\"line\">line</option>\n              <option value=\"bubble\">bubble</option>\n              <option value=\"area\">area</option>\n              <option value=\"bar\">bar</option>\n              <option value=\"sum_min_max\">sum_min_max</option>\n            </select>\n          </div>\n\n          <br />\n          <br />\n\n          <div>\n            <div>\n              <label htmlFor=\"query\">Graphql Query</label>\n            </div>\n            <textarea name=\"query\" ref={register} rows={10} cols={30}></textarea>\n          </div>\n\n          <div>\n            <Button onClick={append}>Add Series</Button>\n          </div>\n\n          {fields.map((field, index) => (\n            <div key={field.id} style={{ margin: \"16px\" }}>\n              <div>\n                Label\n                <input\n                  style={{ width: \"100%\" }}\n                  name={`series[${index}].label`}\n                  ref={register()} // register() when there is no validation rules\n                  defaultValue={field.label} // make sure to include defaultValue\n                />\n              </div>\n              <div>\n                Datasource\n                <input\n                  style={{ width: \"100%\" }}\n                  name={`series[${index}].datasource`}\n                  ref={register()} // register() when there is no validation rules\n                  defaultValue={field.datasource} // make sure to include defaultValue\n                />\n              </div>\n              <div>\n                Primary\n                <input\n                  name={`series[${index}].primary`}\n                  ref={register()} // register() when there is no validation rules\n                  defaultValue={field.primary} // make sure to include defaultValue\n                />\n              </div>\n\n              <div>\n                Secondary\n                <input\n                  name={`series[${index}].secondary`}\n                  ref={register()} // register() when there is no validation rules\n                  defaultValue={field.secondary} // make sure to include defaultValue\n                />\n              </div>\n\n              {watchAllFields.widget_type === \"bubble\" && (\n                <div>\n                  Radius\n                  <input\n                    name={`series[${index}].radius`}\n                    ref={register()} // register() when there is no validation rules\n                    defaultValue={field.radius} // make sure to include defaultValue\n                  />\n                </div>\n              )}\n            </div>\n          ))}\n\n          <div>\n            <input type=\"submit\" />\n          </div>\n\n          {<pre>{JSON.stringify(watchAllFields, null, 2)}</pre>}\n        </form>\n      </div>\n    </Modal>\n  );\n}\n\nexport default Wizard;\n","import React from 'react'\nimport { Chart } from \"react-charts\";\nimport { get } from \"lodash\";\n\nfunction LineChartWidget(props) {\n  const series = React.useMemo(\n    () => ({\n      showPoints: false,\n    }),\n    []\n  );\n\n  const axes = React.useMemo(\n    () => [\n      {\n        primary: true,\n        type: \"time\",\n        position: \"bottom\",\n      },\n      { type: \"linear\", position: \"left\" },\n    ],\n    []\n  );\n\n  const _data = React.useMemo(\n    () =>\n      props.series.map((series) => {\n        const datasource = get(props.data, series.datasource);\n\n        return {\n          label: series.label,\n          data: datasource?.map((dataSourceRecord) => {\n            // TODO radius support\n            // TODO: assume it may not be date\n            return {\n              primary: new Date(get(dataSourceRecord, series.primary)),\n              secondary: get(dataSourceRecord, series.secondary),\n            };\n          }) || [],\n        };\n      }),\n    [props.series, props.data]\n  );\n\n  return <Chart data={_data} series={series} axes={axes} tooltip />;\n}\n\nexport default LineChartWidget\n","import React from 'react'\nimport {get} from 'lodash';\n\nfunction SumMinMaxWidget({series, data}) {\n  return (\n    <div>\n      {series.map(({sum, min, max, label, datasource}) => {\n\n        const dataPtr = get(data, datasource);\n\n        if (!dataPtr) {\n          return <div>ERROR {JSON.stringify(series)}</div>\n        }\n\n        return <div>\n            <h3 style={{textAlign: \"center\"}}>{label}</h3>\n            <div style={{display: \"flex\", textAlign: \"center\", flexGrow: 1, flexBasis: 0, width: \"100%\"}}>\n              <div style={{margin: \"8px\", flex: 1}}>\n                <div style={{textTransform: \"uppercase\"}}>Minimum</div>\n                {get(dataPtr, min)}\n              </div>\n              <div style={{margin: \"8px\", flex: 1}}>\n                <div style={{textTransform: \"uppercase\"}}>Maximum</div>\n                {get(dataPtr, max)}\n              </div>\n              <div style={{margin: \"8px\", flex: 1}}>\n                <div style={{textTransform: \"uppercase\"}}>Total Sum</div>\n                {get(dataPtr, sum)}\n              </div>\n            </div>\n          </div>\n      })}\n    </div>\n  )\n}\n\nexport default SumMinMaxWidget\n","import React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport LineChartWidget from './LineChartWidget';\nimport SumMinMaxWidget from './SumMinMaxWidget';\n\nfunction DashboardWidget(props) {\n  const { loading, error, data } = useQuery(\n    gql`\n      ${props.query}\n    `\n  );\n\n  console.log(loading, error, data);\n\n  if (loading) {\n    return null;\n  }\n\n  if (error) {\n    console.error(error);\n    return <div>\n      Data Fetching Error, check query: {props.query}\n    </div>\n  }\n\n\n  if (props.widget_type === \"line\") {\n    return <LineChartWidget data={data} {...props} />;\n  }\n\n  if (props.widget_type === \"sum_min_max\") {\n    return <SumMinMaxWidget data={data} {...props} />;\n  }\n\n  return <div>Not Implemented</div>\n}\n\nexport default DashboardWidget;\n","import \"./App.css\";\nimport \"react-resizable/css/styles.css\";\nimport \"react-grid-layout/css/styles.css\";\nimport React, { useState } from \"react\";\nimport { WidthProvider, Responsive } from \"react-grid-layout\";\nimport { map } from \"lodash\";\nimport { Button } from \"@material-ui/core\";\nimport Wizard from \"./Wizard\";\nimport DashboardWidget from \"./DashboardWidget\";\n\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\n\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  const clearValue = () => {\n    window.localStorage.removeItem(key);\n  };\n\n  return [storedValue, setValue, clearValue];\n}\n\nconst DEFAULT_LAYOUT = [\n  {\n    \"title\": \"widget-1610935219422\",\n    \"w\": 5,\n    \"h\": 3,\n    \"x\": 0,\n    \"y\": 0,\n    \"widget_type\": \"line\",\n    \"query\": \"query LineChartData {\\n  player_logins {\\n    timestamp\\n    count\\n  }\\n}\\n      \",\n    \"series\": [\n      {\n        \"label\": \"Logins\",\n        \"datasource\": \"player_logins\",\n        \"primary\": \"timestamp\",\n        \"secondary\": \"count\"\n      }\n    ],\n    \"i\": \"0\",\n    \"moved\": false,\n    \"static\": false\n  },\n  {\n    \"title\": \"widget-1610935501685\",\n    \"w\": 5,\n    \"h\": 3,\n    \"x\": 5,\n    \"y\": 0,\n    \"widget_type\": \"line\",\n    \"query\": \"query LineChartData {\\n  player_logins(min_date:\\\"2021-12-01\\\", max_date: \\\"2022-01-01\\\") {\\n    timestamp\\n    count\\n  }\\n}\\n      \",\n    \"series\": [\n      {\n        \"label\": \"Logins\",\n        \"datasource\": \"player_logins\",\n        \"primary\": \"timestamp\",\n        \"secondary\": \"count\"\n      }\n    ],\n    \"i\": \"1\",\n    \"moved\": false,\n    \"static\": false\n  },\n  {\n    \"title\": \"widget-1610935501685\",\n    \"w\": 5,\n    \"h\": 3,\n    \"x\": 0,\n    \"y\": 3,\n    \"widget_type\": \"sum_min_max\",\n    \"query\": `\n\nquery SumMinMaxData {\n  player_logins_agg {\n    sum\n    min\n    max\n  }\n}   \n    \n`,\n    \"series\": [\n      {\n        \"label\": \"Logins Aggregrates\",\n        \"datasource\": \"player_logins_agg\",\n        \"sum\": \"sum\",\n        \"min\": \"min\",\n        \"max\": \"max\"\n      }\n    ],\n    \"i\": \"2\",\n    \"moved\": false,\n    \"static\": false\n  },\n  {\n    \"title\": \"widget-1610935501685\",\n    \"w\": 5,\n    \"h\": 3,\n    \"x\": 5,\n    \"y\": 3,\n    \"widget_type\": \"line\",\n    \"query\": `\n\nquery LineChartData {\n  jan_logins: player_logins(min_date: \"2021-01-01\", max_date: \"2021-01-28\", overlay: true) {\n    timestamp\n    count\n  },\n  feb_logins: player_logins(min_date: \"2021-02-01\", max_date: \"2021-02-28\", overlay: true) {\n    timestamp\n    count\n  },\n  mar_logins: player_logins(min_date: \"2021-03-01\", max_date: \"2021-03-28\", overlay: true) {\n    timestamp\n    count\n  }\n}\n    \n`,\n    \"series\": [\n      {\n        \"label\": \"January Logins\",\n        \"datasource\": \"jan_logins\",\n        \"primary\": \"timestamp\",\n        \"secondary\": \"count\"\n      },\n      {\n        \"label\": \"February Logins\",\n        \"datasource\": \"feb_logins\",\n        \"primary\": \"timestamp\",\n        \"secondary\": \"count\"\n      },\n      {\n        \"label\": \"March Logins\",\n        \"datasource\": \"mar_logins\",\n        \"primary\": \"timestamp\",\n        \"secondary\": \"count\"\n      }\n    ],\n    \"i\": \"3\",\n    \"moved\": false,\n    \"static\": false\n  }\n];\n\nfunction generateLayout() {\n  return DEFAULT_LAYOUT;\n}\n\nfunction App() {\n  const [layout, setLayout, clearLayout] = useLocalStorage(\"layout\", generateLayout());\n  const [wizardOpen, setWizardOpen] = React.useState(false);\n  const [widgetCount, setWidgetCount] = React.useState(layout.length);\n\n  function generateDOM() {\n    return map(layout, function (l, i) {\n      return (\n        <div key={i} className={l.static ? \"static\" : \"\"}>\n          <DashboardWidget {...l} />\n        </div>\n      );\n    });\n  }\n\n  function onLayoutChange(nlayout) {\n    setLayout(\n      nlayout.map((nl) => {\n        const oldValues = layout.find((l) => l.i === nl.i);\n        return { ...oldValues, ...nl };\n      })\n    );\n  }\n\n  function handleResetLayout() {\n    clearLayout();\n    setWidgetCount(DEFAULT_LAYOUT.length);\n    setLayout(generateLayout());\n  }\n\n  function handleWizardClose() {\n    setWizardOpen(false);\n  }\n\n  function handleAddWidget() {\n    setWizardOpen(true);\n  }\n\n  return (\n    <>\n      <Wizard\n        open={wizardOpen}\n        onClose={handleWizardClose}\n        onSubmit={(newWidget) => {\n          newWidget.w = +newWidget.w;\n          newWidget.h = +newWidget.h;\n          newWidget.x = +newWidget.x;\n          newWidget.y = +newWidget.y;\n          newWidget.i = `${widgetCount}`;\n          setWidgetCount(widgetCount + 1);\n\n          console.log(\"widgetAdded\", newWidget);\n          setLayout([...layout, newWidget]);\n          setWizardOpen(false);\n        }}\n      />\n      <div>\n        <div style={{ width: \"100%\" }}>\n          <Button onClick={handleAddWidget}>Add Widget</Button>\n          <Button onClick={handleResetLayout}>Reset Layout</Button>\n          <ResponsiveReactGridLayout\n            layouts={{ lg: layout }}\n            onLayoutChange={onLayoutChange}\n            measureBeforeMount={false}\n          >\n            {generateDOM()}\n          </ResponsiveReactGridLayout>\n        </div>\n        <div style={{ marginRight: \"16px\" }}>\n          <pre>{JSON.stringify(layout, null, 2)}</pre>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { gql, ApolloClient, InMemoryCache } from '@apollo/client';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\nimport { SchemaLink } from '@apollo/client/link/schema';\nconst data = require('./data.json');\n\n\nconst typeDefs = `\n  type PlayerLoginBuckets {\n    timestamp: String\n    count: Float\n  }\n\n  type PlayerLoginsAgg {\n    sum: Float\n    max: Float\n    min: Float\n  }\n\n  type Query {\n    player_logins(min_date: String, max_date: String, overlay: Boolean): [PlayerLoginBuckets]\n    player_logins_agg: PlayerLoginsAgg\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    player_logins: (root, args) => {\n      let overallData = data;\n\n\n      if (args.min_date) {\n        const minDate = new Date(args.min_date);\n        overallData = overallData.filter(({timestamp}) => {\n          return new Date(timestamp) >= minDate;\n        })\n      }\n\n      if (args.max_date) {\n        const maxDate = new Date(args.max_date);\n        overallData = overallData.filter(({timestamp}) => {\n          return new Date(timestamp) <= maxDate;\n        });\n      }\n\n      if (args.overlay) {\n        // TODO: this is naive - it assumes same interval\n        overallData = overallData.map(({timestamp, ...other}) => {\n          const origTimestamp = new Date(timestamp);\n\n          const overlayTimestamp = new Date(\"2021-01-01\");\n          overlayTimestamp.setDate(origTimestamp.getDate())\n\n          return {...other, timestamp: overlayTimestamp.toString()};\n        });\n      }\n\n\n      return overallData;\n    },\n    player_logins_agg: (root, args) => {\n      return {};\n    }\n  },\n  PlayerLoginsAgg: {\n    sum: () => {\n      return data.reduce((pV, {count}) => pV + count, 0)\n    },\n    max: () => {\n      let max = Number.MIN_SAFE_INTEGER;\n\n      for (let i = 0 ; i < data.length; i++) {\n        if (data[i].count > max) {\n          max = data[i].count;\n        }\n      }\n\n      return max;\n    },\n    min: () => {\n      let min = Number.MAX_SAFE_INTEGER;\n\n      for (let i = 0 ; i < data.length; i++) {\n        if (data[i].count < min) {\n          min = data[i].count;\n        }\n      }\n\n      return min;\n    }\n  }\n};\n\n\nconst schema = makeExecutableSchema({\n  typeDefs: typeDefs,\n  resolvers\n})\n\n\n\nexport const graphqlClient = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new SchemaLink({ schema })\n});\n\nwindow.gql = gql;\nwindow.graphqlClient = graphqlClient;\n\nexport default graphqlClient;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { graphqlClient } from \"./client\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={graphqlClient}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}